/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/test_lime_diff_NoPrunnedANDpruned.py:12: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to u'TkAgg' by the following code:
  File "Lenet_SNIP_Lime_Diff.py", line 6, in <module>
    from dataset import Dataset
  File "/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/dataset.py", line 5, in <module>
    import matplotlib.pyplot as plt
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/pyplot.py", line 69, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/backends/__init__.py", line 14, in <module>
    line for line in traceback.format_stack()


  matplotlib.use('Agg')
Using TensorFlow backend.
Lenet_SNIP_Lime_Diff.py:30: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to u'TkAgg' by the following code:
  File "Lenet_SNIP_Lime_Diff.py", line 6, in <module>
    from dataset import Dataset
  File "/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/dataset.py", line 5, in <module>
    import matplotlib.pyplot as plt
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/pyplot.py", line 69, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/backends/__init__.py", line 14, in <module>
    line for line in traceback.format_stack()


  matplotlib.use('Agg')
WARNING:tensorflow:From /home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/model.py:115: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.
Instructions for updating:

Future major versions of TensorFlow will allow gradients to flow
into the labels input on backprop by default.

See `tf.nn.softmax_cross_entropy_with_logits_v2`.

WARNING:tensorflow:From /home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/model.py:182: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Create a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.
2019-12-10 13:53:19.779447: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-12-10 13:54:01.789012: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:06:00.0
totalMemory: 11.17GiB freeMemory: 11.11GiB
2019-12-10 13:54:01.789040: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1511] Adding visible gpu devices: 0
2019-12-10 13:54:02.017714: I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-12-10 13:54:02.017757: I tensorflow/core/common_runtime/gpu/gpu_device.cc:988]      0 
2019-12-10 13:54:02.017763: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 0:   N 
2019-12-10 13:54:02.017887: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10762 MB memory) -> physical GPU (device: 0, name: Tesla K80, pci bus id: 0000:06:00.0, compute capability: 3.7)
('mean, std', 0.13066062, 0.30810776)
('after_normalization_mean, std', -5.1035363e-07, 0.99999946)
("self.dataset['train']['input'].shape", (60000, 32, 32, 3))
|========= START TEST =========|
|================== Samples From Test Data ==================|
lime_base_random_state <mtrand.RandomState object at 0x7f9c7b7a3c30>
lime_base_random_state [0.37454012 0.95071431 0.73199394 0.59865848 0.15601864]
('i, one_sample_diff', 0, 421)
('i, one_sample_diff', 1, 6)
('i, one_sample_diff', 2, 0)
('i, one_sample_diff', 3, 190)
('i, one_sample_diff', 4, 178)
('i, one_sample_diff', 5, 0)
('i, one_sample_diff', 6, 0)
('i, one_sample_diff', 7, 221)
('i, one_sample_diff', 8, 242)
('i, one_sample_diff', 9, 0)
('i, one_sample_diff', 10, 8)
('i, one_sample_diff', 11, 194)
('i, one_sample_diff', 12, 268)
('i, one_sample_diff', 13, 190)
('i, one_sample_diff', 14, 1)
('i, one_sample_diff', 15, 612)
('i, one_sample_diff', 16, 266)
('i, one_sample_diff', 17, 432)
('i, one_sample_diff', 18, 0)
('i, one_sample_diff', 19, 0)
('i, one_sample_diff', 20, 260)
('i, one_sample_diff', 21, 0)
('i, one_sample_diff', 22, 34)
('i, one_sample_diff', 23, 0)
('i, one_sample_diff', 24, 0)
('i, one_sample_diff', 25, 195)
('i, one_sample_diff', 26, 551)
('i, one_sample_diff', 27, 193)
('i, one_sample_diff', 28, 0)
('i, one_sample_diff', 29, 0)
('i, one_sample_diff', 30, 0)
('i, one_sample_diff', 31, 0)
('i, one_sample_diff', 32, 0)
('i, one_sample_diff', 33, 519)
('i, one_sample_diff', 34, 621)
('i, one_sample_diff', 35, 7)
('i, one_sample_diff', 36, 337)
('i, one_sample_diff', 37, 1)
('i, one_sample_diff', 38, 16)
('i, one_sample_diff', 39, 0)
('i, one_sample_diff', 40, 0)
('i, one_sample_diff', 41, 0)
('i, one_sample_diff', 42, 0)
('i, one_sample_diff', 43, 247)
('i, one_sample_diff', 44, 492)
('i, one_sample_diff', 45, 32)
('i, one_sample_diff', 46, 0)
('i, one_sample_diff', 47, 0)
('i, one_sample_diff', 48, 116)
('i, one_sample_diff', 49, 170)
('i, one_sample_diff', 50, 0)
('i, one_sample_diff', 51, 11)
('i, one_sample_diff', 52, 609)
('i, one_sample_diff', 53, 0)
('i, one_sample_diff', 54, 0)
('i, one_sample_diff', 55, 0)
('i, one_sample_diff', 56, 214)
('i, one_sample_diff', 57, 0)
('i, one_sample_diff', 58, 481)
('i, one_sample_diff', 59, 0)
('i, one_sample_diff', 60, 7)
('i, one_sample_diff', 61, 0)
('i, one_sample_diff', 62, 0)
('i, one_sample_diff', 63, 0)
('i, one_sample_diff', 64, 171)
('i, one_sample_diff', 65, 0)
('i, one_sample_diff', 66, 498)
('i, one_sample_diff', 67, 252)
('i, one_sample_diff', 68, 17)
('i, one_sample_diff', 69, 14)
('i, one_sample_diff', 70, 419)
('i, one_sample_diff', 71, 171)
('i, one_sample_diff', 72, 0)
('i, one_sample_diff', 73, 0)
('i, one_sample_diff', 74, 9)
('i, one_sample_diff', 75, 0)
('i, one_sample_diff', 76, 0)
('i, one_sample_diff', 77, 453)
('i, one_sample_diff', 78, 0)
('i, one_sample_diff', 79, 506)
('i, one_sample_diff', 80, 0)
('i, one_sample_diff', 81, 0)
('i, one_sample_diff', 82, 18)
('i, one_sample_diff', 83, 9)
('i, one_sample_diff', 84, 0)
('i, one_sample_diff', 85, 202)
('i, one_sample_diff', 86, 262)
('i, one_sample_diff', 87, 0)
('i, one_sample_diff', 88, 16)
('i, one_sample_diff', 89, 0)
('i, one_sample_diff', 90, 27)
('i, one_sample_diff', 91, 0)
('i, one_sample_diff', 92, 0)
('i, one_sample_diff', 93, 0)
('i, one_sample_diff', 94, 0)
('i, one_sample_diff', 95, 0)
('i, one_sample_diff', 96, 7)
('i, one_sample_diff', 97, 18)
('i, one_sample_diff', 98, 0)
('i, one_sample_diff', 99, 0)
('LIST_sum_mask_diff', [421, 6, 0, 190, 178, 0, 0, 221, 242, 0, 8, 194, 268, 190, 1, 612, 266, 432, 0, 0, 260, 0, 34, 0, 0, 195, 551, 193, 0, 0, 0, 0, 0, 519, 621, 7, 337, 1, 16, 0, 0, 0, 0, 247, 492, 32, 0, 0, 116, 170, 0, 11, 609, 0, 0, 0, 214, 0, 481, 0, 7, 0, 0, 0, 171, 0, 498, 252, 17, 14, 419, 171, 0, 0, 9, 0, 0, 453, 0, 506, 0, 0, 18, 9, 0, 202, 262, 0, 16, 0, 27, 0, 0, 0, 0, 0, 7, 18, 0, 0])
('mean, std', 114.11, 178.59292321428143)
