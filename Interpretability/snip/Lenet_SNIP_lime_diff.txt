/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/test_lime_diff_NoPrunnedANDpruned.py:12: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to u'TkAgg' by the following code:
  File "Lenet_SNIP_Lime_Diff.py", line 6, in <module>
    from dataset import Dataset
  File "/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/dataset.py", line 5, in <module>
    import matplotlib.pyplot as plt
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/pyplot.py", line 69, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/backends/__init__.py", line 14, in <module>
    line for line in traceback.format_stack()


  matplotlib.use('Agg')
Using TensorFlow backend.
Lenet_SNIP_Lime_Diff.py:30: UserWarning: 
This call to matplotlib.use() has no effect because the backend has already
been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

The backend was *originally* set to u'TkAgg' by the following code:
  File "Lenet_SNIP_Lime_Diff.py", line 6, in <module>
    from dataset import Dataset
  File "/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/dataset.py", line 5, in <module>
    import matplotlib.pyplot as plt
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/pyplot.py", line 69, in <module>
    from matplotlib.backends import pylab_setup
  File "/home/r/raent/.local/lib/python2.7/site-packages/matplotlib/backends/__init__.py", line 14, in <module>
    line for line in traceback.format_stack()


  matplotlib.use('Agg')
WARNING:tensorflow:From /home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/model.py:117: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.
Instructions for updating:

Future major versions of TensorFlow will allow gradients to flow
into the labels input on backprop by default.

See `tf.nn.softmax_cross_entropy_with_logits_v2`.

WARNING:tensorflow:From /home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/Interpretability/LIME/AppliedDeepLearningCourse/Interpretability/snip/model.py:184: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Create a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.
2019-12-17 15:53:50.359668: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-12-17 15:54:32.564270: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:06:00.0
totalMemory: 11.17GiB freeMemory: 11.11GiB
2019-12-17 15:54:32.564311: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1511] Adding visible gpu devices: 0
2019-12-17 15:54:32.793274: I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-12-17 15:54:32.793317: I tensorflow/core/common_runtime/gpu/gpu_device.cc:988]      0 
2019-12-17 15:54:32.793323: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 0:   N 
2019-12-17 15:54:32.793449: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10762 MB memory) -> physical GPU (device: 0, name: Tesla K80, pci bus id: 0000:06:00.0, compute capability: 3.7)
('mean, std', 0.13066062, 0.30810776)
('after_normalization_mean, std', -5.1035363e-07, 0.99999946)
("self.dataset['train']['input'].shape", (60000, 32, 32, 3))
|========= START TEST =========|
|================== Samples From Test Data ==================|
lime_base_random_state <mtrand.RandomState object at 0x7f1b22fe4820>
lime_base_random_state [0.37454012 0.95071431 0.73199394 0.59865848 0.15601864]
[0.6830892562866211, 0.9053353145718575, 0.9254311546683311, 0.9842813517898321, 0.9613071270287037, 0.9254311546683311, 0.9737329557538033, 0.9343393296003342, 0.9606680907309055, 0.9343393296003342, 0.916911393404007, 0.9378431178629398, 0.9343393296003342, 0.7518131136894226, 0.9254311546683311, 0.8839842677116394, 0.9343393296003342, 0.888449177145958, 0.7895445376634598, 0.9226415455341339, 0.9343393296003342, 0.9378431178629398, 0.9378431178629398, 0.9326978698372841, 0.9590745978057384, 0.9992743448819965, 0.669028639793396, 0.9628554470837116, 0.8245647549629211, 0.9254311546683311, 0.7895445376634598, 0.9254311546683311, 0.7895445376634598, 0.9547322429716587, 0.8714705109596252, 0.9053353145718575, 0.5889237821102142, 0.9254311546683311, 0.9053353145718575, 0.9254311546683311, 0.9254311546683311, 0.8243081420660019, 0.9764300342649221, 0.9053353145718575, 0.7895445376634598, 0.8491314947605133, 0.9254311546683311, 0.9053353145718575, 0.9838562197983265, 0.977202508598566, 0.9378431178629398, 0.7895445376634598, 0.8556782901287079, 0.893536739051342, 0.9378431178629398, 0.916911393404007, 0.9629153199493885, 0.9254311546683311, 0.9343393296003342, 0.883124016225338, 0.8745939880609512, 0.8737782984972, 0.9343393296003342, 0.7895445376634598, 0.800133690237999, 0.9547322429716587, 0.9378431178629398, 0.9490112587809563, 0.7895445376634598, 0.9497756585478783, 0.6574158072471619, 0.02630561590194702, 0.9053353145718575, 0.9343393296003342, 0.9254311546683311, 0.8621207475662231, 0.7895445376634598, 0.9053353145718575, 0.9343393296003342, 0.9487604834139347, 0.7544290870428085, 0.9378431178629398, 0.9053353145718575, 0.8211423009634018, 0.8737782984972, 0.9751437101513147, 0.8311340510845184, 0.7895445376634598, 0.9378431178629398, 0.9254311546683311, 0.7895445376634598, 0.9378431178629398, 0.9343393296003342, 0.7895445376634598, 0.9254311546683311, 0.9775722082704306, 0.9254311546683311, 0.40725886821746826, 0.9378431178629398, 0.9343393296003342]
('mean, std', 0.8788955334364437, 0.12555186314918623)
